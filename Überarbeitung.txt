

## Sollten Bibliotheken programmieren?

### Bibliothek und programmieren passt das?

Wenn man an programmieren denkt, kommt einem mit Sicherheit nicht als erstes eine Bibliothek in den Sinn, und doch programmieren genau diese. In erster Linie treiben große Einrichtungen diesen Trend voran, aber auch kleinere Bibliotheken beteiligen sich. Diese Entwicklung ist dabei durchaus auf die Geschichte der Bibliotheken zurück zu führen. Bibliotheken legten schon immer Wert darauf die vorhandenen Informationsressourcen selbst zu organisieren und zu präsentieren.[Christensen.2010] In den Zeiten des Internets greifen sie allerdings vermehrt auf die verlockenden Angebote kommerzieller Anbieter wie Ebsco, OCLC oder ProQuest zurück. ![](https://oclc.org/content/dam/oclc/common/images/logos/new/OCLC/OCLC_Logo_H_Color_NoTag.png) 
Dies ist zwar bequemer und die Bibliothekare können sich vermeintlich wichtigeren Bereichen widmen, doch werden sie auch zunehmend abhängiger. Hinzu kommt, dass der Auftritt der Bibliothek nicht mehr den veränderten Nutzeransprüchen entgegen kommt. Die Nutzer erwarten zunehmend Angebote des Web 2.0  zum Beispiel bei der Recherche im Katalog.[beluga]
Bibliotheken haben heute in der Regel drei Möglichkeiten. Sie könne auf Produkte kommerzieller Anbieter zurückgreifen, fertige Produkte selbst weiter entwickeln und anpassen oder eine eigene Software schreiben, die individuell abgestimmt ist.


### Kommerzielle Software

Für die Anschaffung einer kommerziellen Lösung spricht, dass Personal und damit die Kosten für diese nicht in Anspruch genommen werden. Es mus ggf. nur die Zeit für Schulungen eingeplant werden. Die Integration und Problemlösung liegt beim Anbieter. Je nach Größe und Umfang der Software müssen vor der Entscheidung für eine kommerzielle Lösung folgende Punkte bedacht werden:
- Kosten für die Anschaffung und Betrieb
- wird die Software Weiterentwickelt
- wer gehört zum Anwenderkreis
- können bestehende Dienste eingebunden werden [Kostadt.2010]

Insbesondere die hohen Anschaffungskosten stellen viele Bibliotheken die traditionell nach dem kamaralistischen System arbeiten vor große Probleme. 

### Open-Source-Software Anwendungen

Open-Source-Software hört sich erst einmal gut an schreckt aber noch immer Anwender ab die lieber auf eine kommerzielle Software zurückgreifen auch wenn diese schlechter oder gar nicht kompatibel ist. Dabei kann durch das schreiben eigene Software Einfluss auf die Entwicklung genommen werden.[Chudnov.2014] Das sie zurück schrecken kann unterschiedliche Gründe haben. Bei Fehlfunktionen oder Ausfällen muss nicht das eigene Personal das Problem beheben. Dies ist besonders dann schwierig wenn nur wenige Mitarbeiter über die notwenigen Kenntnisse verfügen mit der Software zu arbeiten. In solchen Fällen ist eine gute Dokumentation sehr wichtig. Nur dadurch können sich ggf. andere in die Software einarbeiten. Auch können die Angst vor Rückschlägen und der damit verbundene Mehraufwand abschreckend wirken. In Zeiten knapper Kassen wird dann lieber auf eine kommerzielle Lösung zurückgegriffen als Zeit und Geld in eine Entwicklung bzw. eine Anpassung zu investieren. 
Dabei ist es nicht unbedingt erforderlich die komplette Software selbst zu entwickeln. Eine Möglichkeit ist vorhandene kommerzielle oder Open-Source-Software den eigenen Bedürfnissen anzupassen. Es bedeutet allerdings auch, dass man mit Rückschlägen rechnen muss. Nicht alles klappt auf Anhieb und einiges lässt sich vielleicht nicht realisieren. Die so entstehende Software kann individuell auf die jeweilige Nutzergruppe zugeschnitten werden. Dies ist zum Beispiel sinnvoll bei der Navigation in den vielfältigen Informationsstrukturen. Wenn jeder Katalog und jede Datenbank eine anders aufgebaute Suchfunktion besitz kann dies schnell zu Frust auf Seiten der Nutzer führen. Besonders in Zeiten in denen zunehmend Online mit Datenbanken, e-Journals oder e-Books gearbeitet. [Droler.2012] Alle Anpassungen sollten daher stets auf die Nutzer ausgerichtet sein. Software die an den Nutzern vorbei entwickelt wird verschwindet schnell in der Bedeutungslosigkeit. [Christensen.2010]

Bei der Programmierung eigener Software sollten daher folgendes bedacht werden:
- was soll die Software leisten
- wer verfügt über das nötige know how um die Software zu entwerfen
- Bestimmung von Administratoren
- was wird die Entwicklung am Ende kosten
- haben andere schon Erfahrungen gesammelt in dieser Richtung
- wer sind die späteren Nutzer
- gibt es eine Open-Source-Software die als Basis genutzt werden kann
- mit welcher Programmiersprache soll die Software realisiert werden

####Katalog Köln

Ein gelungenes Beispiel für eine Eigenentwicklung ist die Zusammenführung verschiedener Benutzeroberflächen der Universität Köln und der Stadtbibliothek Köln. [Köln Homepage](https://www.ub.uni-koeln.de/) Hier wurden Benutzerkonten zusammengelegt, der Sucheinstieg vereinfacht und Web 2.0 Dienste integriert. Tipps zur aktuellen Recherche oder der Chatbot Albot helfen den Nutzern direkt weiter. [Albot](https://www.ub.uni-koeln.de/nmIQ/Albot_html.jsp) Der Katalog der Universität Köln wurde ebenfalls den veränderten Nutzungsansprüchen angepasst. So könne diese hier Literaturlisten oder Tags generieren. Zusätzlich wird eine Liste mit den 20 meist aufgerufenen Titeln der letzten 6 Monate zur Verfügung gestellt. [Top 20 Liste](http://kug.ub.uni-koeln.de/portal/kug/databases/titles/popular.html?l=de) Dies ist auch für die Bibliothek von Vorteil. Häufig gesuchte Literatur kann so ggf. in größere Stückzahl oder neueren Auflagen bestellt werden. 

####VuFind

Eine gelungene Anpassung der Suchoberfläche zeigt sich auch in beluga [beluga Startseite](http://beluga.sub.uni-hamburg.de/vufind/). beluga basiert auf der Open-Source-Software VuFind, dass an die Falvey Memorial Library in den USA entwickelte.
![](http://t2.gstatic.com/images?q=tbn:ANd9GcQnMi2KDCv-mOSRtHjIDYRJkVHuX_TBWOOO-3fC_9OmY88UcwGZh4ZUFcDC) 
VuFind war eine der ersten Open Discovery Interfaces das unter der General Public License (GPL) verbreitet wurde. Die Suchoberfläche bei VuFind ähnelt der von Google. Die Treffer werden nach Relevanz sortiert. Eine Tefferliste zeigt zusätzlich an, in welchen Verzeichnissen etwas gefunden wurde. Bei der Eingabe schlägt VuFind weiter Facetten des Suchbegriffes vor. Auch diese Funktion erinnert stark an Google. VuFind kann zusätzlich zu den Bibliotheksbeständen mit Wikipedia Einträgen oder Repositorien durch eine OAI-Schnittstelle angereichert werden. Durch das Webservice-Protokoll Search/Retrieval (SRU) ist VuFind in der Lage Anfragen an Datenbanken zu schicken und die Treffer anzuzeigen. Die Treffer werden dann in einem XML-Format bereitgestellt. Das Frontend von VuFind ist größtenteils in PHP und HTML programmiert. Dadurch kann die Suchoberfläche relativ einfach angepasst werden. Als Suchmaschiene verwendet VuFind Solr Energy.[VillanovaUniversity.2014] Besonders interessant für Bibliotheken sind die Permalinks für Katalogisate die VuFind unterstützt. [VuFind Trefferseite](http://blogs.kent.ac.uk/vufindkeven/files/2010/08/VuFind-Beta-BK-annotated2.jpg) 

###Fazit

Bibliotheken sollten sich ihrer Rolle bewusst werden und ihre Informationsdienste wieder selbst gestalten. Die meisten wissen heute nicht mehr, dass viele der heutigen Bibliothekssysteme früher Eigenbauten der Bibliotheken waren.[Christensen.2010] Hinzu kommt das die Nachfrage nach elektronischen Medien steigt. Die Nutzer erwarten eine Oberfläche die ihnen vertraut ist wie zB. bei Google oder Amazon.[Christensen.2010] Titel sollen nicht nur als reiner Text in der Trefferliste erscheinen sondern zusätzlich Informationen wie Bildern oder Inhaltsverzeichnissen bieten. Die Nutzer überfliegen den Inhalt nur und entscheiden sich häufig nicht für die beste Lösung in den Augen der Bibliothekare. Schlecht konzipierte Systeme verleiten daher schnell dazu sich irgendwie durch zu wurschteln bis zum vermeintlich richtigen Ergebnis.[Christensen.2010] Try and error ist dann die Devise. 
Software zu schreiben heißt Einfluss zu nehmen.[Chudnov.2014]



###Quellenverzeichnis

@misc{Goobi.DigitalisierenimVerein.2004,
 author = {{Goobi. Digitalisieren im Verein}},
 year = {2004},
 title = {Goobi: PHP, SQL, JavaScript,},
 url = {http://www.goobi.org/},
note = {Software für Digitalisierungsprojekte, 
Open-Source-Anwendung, 
Großer Anwenderkreis}}


@misc{Droler.2012,
 author = {Drößler, Stefan},
 editor = {{Blog der Universitätsbibliothek Kassel}},
 year = {2012},
 title = {Neues Rechercheportal VuFind kommt 2013},
 url = {http://blog.ub.uni-kassel.de/ub/2012/05/22/rechercheportal-vufind/},
 address = {Kassel},
 urldate = {14.05.2014},
note = {Test der Universitätsbibliothek Kasse, UB Kassel ist an der Weiterentwicklung beteiligt}}


@misc{CornellUniversity.2014,
 author = {{Cornell University}},
 year = {2014},
 title = {VIVO},
 address = {Ithaca},
note = {Semantische Open-Source-Software, entwickelt an der Cornell University, interdisziplinäre Darstellung von Forschungsaktivitäten, fachliche Kommunikation und Kollaboration fördern, Science Lab der TIB und HsH arbeiten mit VIVO}}


@misc{Hauschke.2013,
 author = {Hauschke, Christian},
 year = {2013},
 title = {Neues zu SerWisS, dem Schriftenserver der HsH},
 url = {http://blog.bib.hs-hannover.de/2013/12/11/neues-zu-serwiss-dem-schriftenserver-der-hsh/},
 address = {Hannover},
note = {Generalüberholung des SerWisS Server, Überblick über die Neuerungen}}


@misc{VillanovaUniversity.2014,
 author = {{Villanova University}},
 year = {2014},
 title = {vufind: PHP, PEAR},
 url = {http://vufind.org/},
note = {Open-Source-Software, 
Kann an Stelle eines OPACs verwendet werden bzw. kann mehrere zusammenfassen, einfache Suchmaske, zunehmende Zahl der Anwender}}


@misc{Steinke.2009,
 author = {Steinke, Karl-Heinz},
 year = {2009},
 title = {Entwicklung und Untersuchung von Erkennungssoftware für den Einsatz im Projekt Herbar Digital},
note = {Entwicklung einer Erkennungssoftware für kursiv geschrieben Handschriften}}


@misc{Kostadt.2010,
 author = {Kostädt, Peter},
 year = {2010},
 title = {Softwareentwicklung in Bibliotheken und Verbundzentralen: Ist das sinnvoll?},
note = {Wo wird selbst entwickelte Software eingesetzt?, Welche Modelle gibt es?, DigiBib des hbz Verbund, Katalog der Universität und Stadtbibliothek Köln}}


@misc{.06.05.2013,
 year = {06.05.2013},
 title = {: Wieviel Informatik benötigen Bibliothekare?},
 urldate = {18.04.2014},
note = {Workshop für Bibliothekare um diesen Informatik näher zu bringen. Letzter Termin am 04.- und 05.03.2014}}


@misc{Digitale Bibliothek,
 title = {Digitale Bibliothek (Bibliothekskatalog): Wikipedia},
 url = {http://de.wikipedia.org/wiki/Digitale_Bibliothek_\%28Bibliothekskatalog\%29},
 urldate = {14.05.2014},
note = {Geschichte der DigiBib, möglichkeit der Fernleihe oder Dokumentenlieferservice, OpenURL-Schnittstelle zur Integration andere Anwendungen, Alert-Dienst}}


@misc{beluga,
 title = {beluga},
 url = {http://beluga.sub.uni-hamburg.de/vufind/},
note = {beluga basiert auf der Software von VuFind, alle wissenschaftlichen Bibliotheken aus Hamburger sind gleichzeitig recherchierbar}}


@article{Aumeier.2007,
 author = {Aumeier, Florian and Heinen, Ingrid},
 year = {2007},
 title = {Inhouse Löungen für das Jülicher Electronic Resource Management System},
 pages = {322 bis 329},
 volume = {41},
 number = {3},
 journal = {Bibliotheksdienst},
 note = {Umstellung der Zentralbibliothek auf e-only Zeitschriften, SQL Datenbanken verwalteten alle Daten zur Dokumentation des Bestandes (alt), 
 Neue relationale Datenbank zur kooperativen Datenpflege (ERM-System), 
 Erweiterung geplant}}


@misc{Chudnov.2014,
 author = {Chudnov, Dan},
 year = {2014},
 title = {Why we Write Software at GW Libraries},
 url = {http://library.gwu.edu/scholarly-technology-group/posts/why-we-write-software-gw-libraries},
 urldate = {01.04.2014},
note = {Software zu schreiben heißt Einfluss nehmen, Eigene Software kann durch andere weiter genutzt und verbessert (angepasst) werden, Auf Nutzer zugeschnitten, Software schreiben um Marktlücken zu schließen, 
Anpassung von vorhandener Software, 
Vorteile für Forscher}}


@misc{Christensen.2010,
 author = {Christensen, Anna},
 year = {2010},
 title = {Bibliotheken als Software-Schmiede: Erfahrungen aus der SUB Hamburg},
 url = {http://de.slideshare.net/mobile/xenzen/bibliotheken-als-softwareschmieden-erfahrungen-aus-der-sub-hamburg},
 urldate = {01.04.2014},
note = {Softwareentwicklung an der SUB Hamburg, 
Was sind Eigenentwicklungen, was Anpassungen, 
Projekte werden vorgestellt}}


@misc{Baron.1999,
 author = {Baron, Christine and Stehle, Marcel},
 editor = {Bachelorarbeit},
 year = {2010},
 title = {Der OPAC aus dem Baukasten: Realisierung eines Katalog 2.0 unter Einbeziehung der Community},
 url = {http://opus.haw-hamburg.de/volltexte/2011/1143/pdf/schmitt_stehle_opac_aus_dem_baukasten_1_0.pdf},
note = {Bachelorarbeit zum Thema VuFind}}


@misc{Schmitt. 2010,
 author = {Schmitt, Jörg},
 editor = {hbz},
 year = {1999},
 title = {DigiBib - Die Digitale Bibliothek},
 url = {http://www.hbz-nrw.de/angebote/digitale_bibliothek/},
note = {Digitale Bibliothek, Kooperation des hbz, der Hochschulbibliotheken in NRW und Rheinland Pfalz, Gebündelte Suchoberfläche für verschieden Kataloge und Verzeichnisse}}
 


















