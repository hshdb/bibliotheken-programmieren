

- Brush up on Markdown: http://daringfireball.net/projects/markdown/basics
- Learn about Penflip: [penflip.com/help](http://www.penflip.com/help)



## Sollten Bibliotheken programmieren?

### Bibliothek und programmieren passt das?

Wenn man an Programmieren denkt, kommt einem mit Sicherheit nicht als erstes eine Bibliothek in den Sinn, und doch programmieren genau diese. In erster Linie treiben große Einrichtungen diesen Trend voran, aber auch kleinere Bibliotheken beteiligen sich. Diese Entwicklung ist dabei durchaus auf die Geschichte der Bibliotheken zurück zu führen. Bibliotheken legten schon immer Wert darauf die vorhandenen Informationsressourcen selbst zu organisieren und zu präsentieren. In den Zeiten des Internets greifen sie allerdings vermehrt auf die verlockenden Angebote kommerzieller Anbieter wie Ebsco, OCLC oder ProQuest zurück. ![](https://oclc.org/content/dam/oclc/common/images/logos/new/OCLC/OCLC_Logo_H_Color_NoTag.png) 
Dies ist zwar bequemer und die Bibliothekare können sich vermeintlich wichtigeren Bereichen widmen, doch werden sie auch zunehmend abhängiger. Hinzu kommt, dass der Auftritt der Bibliothek nicht mehr den veränderten Nutzeransprüchen entgegen kommt. Die Nutzer erwarten zunehmend Angebote des Web 2.0  zum Beispiel bei der Recherche im Katalog.
Bibliotheken haben heute in der Regel drei Möglichkeiten. Sie können auf Produkte kommerzieller Anbieter zurückgreifen, fertige Produkte selbst weiterentwickeln und anpassen oder eine eigene Software schreiben, die individuell abgestimmt ist.


### Kommerzielle Software

Für die Anschaffung einer kommerziellen Lösung spricht, dass Personal und damit die Kosten für diese nicht in Anspruch genommen werden. Es muss ggf. nur die Zeit für Schulungen eingeplant werden. Die Integration und Problemlösung liegt beim Anbieter. Je nach Größe und Umfang der Software müssen vor der Entscheidung für eine kommerzielle Lösung folgende Punkte bedacht werden:
- Kosten für die Anschaffung und Betrieb
- wird die Software Weiterentwickelt
- wer gehört zum Anwenderkreis
- können bestehende Dienste eingebunden werden

Insbesondere die hohen Anschaffungskosten stellen viele Bibliotheken, die traditionell nach dem kameralistischen System arbeiten, vor große Probleme. 

### Open-Source-Software Anwendungen

Open-Source-Software hört sich erst einmal gut an, schreckt aber noch immer Anwender ab die lieber auf eine kommerzielle Software zurückgreifen, auch wenn diese schlechter oder gar nicht kompatibel ist. Dabei kann durch das Schreiben eigenes Software Einfluss auf die Entwicklung genommen werden. Dass sie zurückschrecken, kann unterschiedliche Gründe haben. Bei Fehlfunktionen oder Ausfällen muss nicht das eigene Personal das Problem beheben. Dies ist besonders dann schwierig, wenn nur wenige Mitarbeiter über die notwenigen Kenntnisse verfügen, mit der Software zu arbeiten. In solchen Fällen ist eine gute Dokumentation sehr wichtig. Nur dadurch können sich ggf. andere in die Software einarbeiten. Auch können die Angst vor Rückschlägen und der damit verbundene Mehraufwand abschreckend wirken. In Zeiten knapper Kassen wird dann lieber auf eine kommerzielle Lösung zurückgegriffen als Zeit und Geld in eine Entwicklung bzw. eine Anpassung zu investieren. 
Dabei ist es nicht unbedingt erforderlich die komplette Software selbst zu entwickeln. Eine Möglichkeit ist vorhandene kommerzielle oder Open-Source-Software den eigenen Bedürfnissen anzupassen. Es bedeutet allerdings auch, dass man mit Rückschlägen rechnen muss. Nicht alles klappt auf Anhieb und einiges lässt sich vielleicht nicht realisieren. Die so entstehende Software kann individuell auf die jeweilige Nutzergruppe zugeschnitten werden. Dies ist zum Beispiel sinnvoll bei der Navigation in den vielfältigen Informationsstrukturen. Wenn jeder Katalog und jede Datenbank eine anders aufgebaute Suchfunktion besitzt, kann dies schnell zu Frust auf Seiten der Nutzer führen. Besonders in Zeiten in denen zunehmend Online mit Datenbanken, e-Journals oder e-Books gearbeitet wird. Alle Anpassungen sollten daher stets auf die Nutzer ausgerichtet sein. Software, die an den Nutzern vorbei entwickelt wird, verschwindet schnell in der Bedeutungslosigkeit.

Bei der Programmierung eigener Software sollte daher folgendes bedacht werden:
- was soll die Software leisten
- wer verfügt über das nötige know how (Know-how), um die Software zu entwerfen
- Bestimmung von Administratoren
- was wird die Entwicklung am Ende kosten
- haben andere schon Erfahrungen gesammelt in dieser Richtung
- wer sind die späteren Nutzer
- gibt es eine Open-Source-Software die als Basis genutzt werden kann
- mit welcher Programmiersprache soll die Software realisiert werden

Hier bieten sich ein paar generelle Bemerkungen über die Software-Entwicklung von der Bib selber, eventuelle Schwierigkeiten der Veröffentlichung dieser Software in Repositorien (laut Aufgabenstellung). Ich kann aber vermuten, dass diese Informationen schwer zu finden sind.

####Katalog Köln

Ein gelungenes Beispiel für eine Eigenentwicklung ist die Zusammenführung verschiedener Benutzeroberflächen der Universität (Unibib?) Köln und der Stadtbibliothek Köln. [Köln Homepage](https://www.ub.uni-koeln.de/) Hier wurden Benutzerkonten zusammengelegt, der Sucheinstieg vereinfacht und Web 2.0-Dienste integriert. Tipps zur aktuellen Recherche oder der Chatbot Albot helfen den Nutzern direkt weiter. [Albot](https://www.ub.uni-koeln.de/nmIQ/Albot_html.jsp) Der Katalog der Universität Köln wurde ebenfalls den veränderten Nutzungsansprüchen angepasst. So könne diese hier Literaturlisten oder Tags generieren. Zusätzlich wird eine Liste mit den 20 meist aufgerufenen Titeln der letzten 6 Monate zur Verfügung gestellt. [Top 20 Liste](http://kug.ub.uni-koeln.de/portal/kug/databases/titles/popular.html?l=de) Dies ist auch für die Bibliothek von Vorteil. Häufig gesuchte Literatur kann so ggf. in größere Stückzahl oder neueren Auflagen bestellt werden. 

####VuFind

Eine gelungene Anpassung der Suchoberfläche zeigt sich auch in beluga [beluga Startseite](http://beluga.sub.uni-hamburg.de/vufind/). beluga basiert auf der Open-Source-Software VuFind, dass an die Falvey Memorial Library in den USA entwickelte.
![](http://t2.gstatic.com/images?q=tbn:ANd9GcQnMi2KDCv-mOSRtHjIDYRJkVHuX_TBWOOO-3fC_9OmY88UcwGZh4ZUFcDC) 
VuFind war eine der ersten Open Discovery Interfaces das unter der (GNU?) General Public License (GPL) verbreitet wurde. Die Suchoberfläche bei VuFind ähnelt der von Google. Die Treffer werden nach Relevanz sortiert. Eine Tefferliste zeigt zusätzlich an, in welchen Verzeichnissen etwas gefunden wurde. Bei der Eingabe schlägt VuFind weiter Facetten des Suchbegriffes vor. Auch diese Funktion erinnert stark an Google. VuFind kann zusätzlich zu den Bibliotheksbeständen mit Wikipedia Einträgen oder Repositorien durch eine OAI-Schnittstelle angereichert werden. Durch das Webservice-Protokoll Search/Retrieval (SRU) ist VuFind in der Lage Anfragen an Datenbanken zu schicken und die Treffer anzuzeigen. Die Treffer werden dann in einem XML-Format bereitgestellt. Das Frontend von VuFind ist größtenteils in PHP und HTML programmiert. Dadurch kann die Suchoberfläche relativ einfach angepasst werden. Als Suchmaschine verwendet VuFind Solr Energy. Besonders interessant für Bibliotheken sind die Permalinks für Katalogisate, die VuFind unterstützt. [VuFind Trefferseite](http://blogs.kent.ac.uk/vufindkeven/files/2010/08/VuFind-Beta-BK-annotated2.jpg) 

###Fazit

Bibliotheken sollten sich ihrer Rolle bewusst werden und ihre Informationsdienste wieder selbst gestalten. Die meisten wissen heute nicht mehr, dass viele der heutigen Bibliothekssysteme früher Eigenbauten der Bibliotheken waren. Hinzu kommt das die Nachfrage nach elektronischen Medien steigt. Die Nutzer erwarten eine Oberfläche die ihnen vertraut ist wie z. B. bei Google oder Amazon. Titel sollen nicht nur als reiner Text in der Trefferliste erscheinen sondern zusätzlich Informationen wie Bildern oder Inhaltsverzeichnissen bieten. Die Nutzer überfliegen den Inhalt nur und entscheiden sich häufig nicht für die beste Lösung in den Augen der Bibliothekare. Schlecht konzipierte Systeme verleiten daher schnell dazu, sich irgendwie durchzuwursteln bis zum vermeintlich richtigen Ergebnis. Try and error ist dann die Devise. 
Software zu schreiben heißt Einfluss zu nehmen.

Literaturliste? Belege der Quellen der Information im Text?

Laut Aufgabenstellung sollten Pros und Contras gesammelt werden. Wenn die Meinungen aus der Fachcommunity wirklich die Grundlage der Ausarbeitung bilden, ist es leider nicht ersichtlich.

 


















